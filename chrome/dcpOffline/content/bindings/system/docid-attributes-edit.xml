<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE bindings [
      <!ENTITY % leaf-attributes-bindingDTD SYSTEM "chrome://dcpoffline/locale/bindings/leaf-attributes-binding.dtd" >
      <!ENTITY separator "&#160;:&#160;" >
      <!ENTITY systemBindingsDirPath "chrome://dcpoffline/content/bindings/system" >
      %leaf-attributes-bindingDTD;
]>
<bindings id="docid-attributes-binding" xmlns="http://www.mozilla.org/xbl" xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
    xmlns:xbl="http://www.mozilla.org/xbl"
>
    <!-- docid attributes -->
    <binding id="docid-attr-edit" extends="&systemBindingsDirPath;/leaf-attributes-edit.xml#leaf-attr-edit">
        <content>
            <xul:hbox xbl:inherits="attrid" flex="1" class="dcpAttribute docid">
                <xul:label anonid="label" class="dcpLabel" xbl:inherits="value=label" />
                <xul:label anonid="separator" class="dcpSeparator" value="&separator;" />
                <xul:menulist editable="false" disableautoselect="true" anonid="displayValue" class="dcpValue">
                    <xul:menupopup anonid="queryList" datasources="profile:storage.sqlite" ref="*" querytype="storage">
                        <xul:template>
                            <xul:query><![CDATA[
                                SELECT initid, title 
                                FROM doctitles
                                WHERE famname = :famid and initid like :filterid order by title
                            ]]>
                                <xul:param anonid="famid" name="famid" />
                                <xul:param anonid="filterid" name="filterid" />
                            </xul:query>
                            <xul:action>
                                <xul:menuitem uri="?" value="?initid" label="?title" />
                            </xul:action>
                        </xul:template>
                    </xul:menupopup>
                </xul:menulist>
            </xul:hbox>
        </content>
        <implementation>
            <method name="reloadValue">
                <body><![CDATA[
                    var value = this.getDocId();
                    if (! value) value=this.getValue();
                    var menuList = this.getChild('displayValue');
                    var nbItems = menuList.itemCount;
                    for(var i = 0; i < nbItems; i++) {
                    
                        if(menuList.getItemAtIndex(i).value == value){
                            menuList.selectedIndex = i;
                            break;
                        }
                    }
                    var icon=null;
                    var sdoc=docManager.getLocalDocument({initid:value});
                    if (! sdoc) sdoc=docManager.getLocalDocument({name:this.getAttribute('relationFamily')});
                    if (sdoc) {
                      icon=sdoc.getIcon();
                    }
                    
                    if (icon) {
                    
                          menuList.image='file://'+icon;
                    }
                ]]></body>
            </method>
            <method name="getDocId">
                <body><![CDATA[
                    var menuList = this.getChild('displayValue');
                    return menuList.value;
                ]]></body>
            </method>
            <method name="getDocTitle">
                <body><![CDATA[
                    var menuList = this.getChild('displayValue');
                    return menuList.label;
                ]]></body>
            </method>
            <constructor><![CDATA[
              if (this.getAttribute('relationFamily')) {
                this.getChild('famid').textContent = this.getAttribute('relationFamily');
                this.getChild('filterid').textContent = this.getValue();
                this.getChild('displayValue').menupopup.builder.rebuild();
                this.reloadValue();
              }
            ]]></constructor>
        </implementation>
        <handlers>
            <handler event="change"><![CDATA[
                //alert('change');
            ]]></handler>
            <handler event="focus"><![CDATA[
                if (this.getChild('filterid').textContent != '%') {
                 // optimize : call complete query when use it
                   this.getChild('filterid').textContent='%';
                   var menuList = this.getChild('queryList');
                   menuList.builder.rebuild();
                   this.reloadValue();
                }
            ]]>
            </handler>
            <handler event="command"><![CDATA[
              if (this.getAttribute("noset") != "true") {
                this.setValue(this.getDocId());
                } else {
                this.reloadValue();
              }
            ]]></handler>
        </handlers>
    </binding>
    <binding id="docid-multiple-attr-edit" extends="&systemBindingsDirPath;/leaf-attributes-edit.xml#leaf-attr-edit">
        <content>
            <xul:hbox xbl:inherits="attrid" flex="1" class="dcpAttribute docid">
                <xul:label anonid="label" class="dcpLabel" xbl:inherits="value=label" />
                <xul:label anonid="separator" class="dcpSeparator" value="&separator;" />
                <xul:hbox>
                <xul:vbox>
                    <xul:listbox anonid="multiBox" flex="1" seltype="multiple">
                    </xul:listbox>
                    <dcpAttribute anonid="selector" xbl:inherits="attrid,label,relationFamily,visibility,type" nolabel="true" noset="true"
                        multiple="false" />
                </xul:vbox>
                 <xul:button anonid="clearSelection" label="Clear selection" />
                </xul:hbox>
            </xul:hbox>
        </content>
        <implementation>
           <field name="clearSelection"><![CDATA[
                this.getChild('clearSelection');
            ]]></field>
         <method name="reloadValue">
                <body><![CDATA[
                    Components.utils.import("resource://modules/formater.jsm");
            
            var docids=this.getValue();
            var olistbox=this.getChild("multiBox");
            while (olistbox.getRowCount() > 0) {
                olistbox.removeItemAt(0);
            }
            var ltitle;
            for (var i=0;i< docids.length;i++) {
                ltitle=formater.getDocumentTitle({initid:docids[i]});
               
                olistbox.appendItem(ltitle, docids[i]);
            }
            olistbox.setAttribute('rows', docids.length);
                ]]></body>
            </method>
            
        </implementation>
          <handlers>
            <handler event="change"><![CDATA[
                alert('change');
            ]]></handler>
             <handler event="click" button="0"><![CDATA[
                if(event.originalTarget == this.clearSelection){
                    alert('clear');
                }
            ]]></handler>
            <handler event="command"><![CDATA[
               var sel=this.getChild('selector');
               logConsole('sel', sel.tagName);
               var newDocumentId=sel.getDocId();
               
               var olistbox=this.getChild("multiBox");
               var nbRows=olistbox.getRowCount();
               var isAlreadySet=false;
               for (var i=0;i<nbRows;i++) {
                  if (olistbox.getItemAtIndex(i).value == newDocumentId) {
                    isAlreadySet=true;
                    break;
                  }
               }
               if (! isAlreadySet) {
                   var newtitle=sel.getDocTitle();
                   /*
                   var newItem=olistbox.appendItem(newtitle, newDocumentId);
                   olistbox.setAttribute('rows', olistbox.getRowCount());
                   logConsole('sel', newDocumentId);
                   logConsole('selindex', olistbox.getIndexOfItem(newItem));
                    // alert('the command change');
                    */
                   var values=[];
                   var nbRows=olistbox.getRowCount();
                   logConsole('xcount', nbRows);
                   for (var i=0;i<nbRows;i++) {
                      if (olistbox.getItemAtIndex(i).value) {
                        values.push(olistbox.getItemAtIndex(i).value);
                        }
                   }
                   values.push(newDocumentId);
                  
                   this.setValue(values);
                }
            ]]></handler>
        </handlers>
    </binding>
</bindings>