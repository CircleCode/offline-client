<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE bindings [
      <!ENTITY % leaf-attributes-bindingDTD SYSTEM "chrome://dcpoffline/locale/bindings/leaf-attributes-binding.dtd" >
      <!ENTITY separator "&#160;:&#160;" >
      <!ENTITY systemBindingsDirPath "chrome://dcpoffline/content/bindings/system" >
      %leaf-attributes-bindingDTD;
]>
<bindings id="docid-attributes-binding" xmlns="http://www.mozilla.org/xbl" xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
    xmlns:xbl="http://www.mozilla.org/xbl"
>
    <!-- docid attributes -->
    <binding id="docid-attr-edit" extends="&systemBindingsDirPath;/leaf-attributes-edit.xml#leaf-attr-edit">
        <content>
            <xul:hbox xbl:inherits="attrid,collapsed" flex="1" class="dcpAttribute docid">
            
                <dcpAttributeLabel anonid="attrLabel" xbl:inherits="value=label" />
                <xul:menulist xbl:inherits="disabled" editable="false" disableautoselect="true" anonid="displayValue" class="dcpValue">
                    <xul:menupopup anonid="queryList" datasources="profile:storage.sqlite" ref="*" querytype="storage">
                        <xul:menuitem anonid="choose" value="" class="dcpChooseDocid" label="choose document" />
                        <xul:template>
                            <xul:query><![CDATA[
                                SELECT initid, title 
                                FROM doctitles
                                WHERE famname = :famid and initid like :filterid order by title
                            ]]>
                                <xul:param anonid="famid" name="famid" />
                                <xul:param anonid="filterid" name="filterid" />
                            </xul:query>
                            <xul:action>
                                <xul:menuitem uri="?" value="?initid" label="?title" />
                            </xul:action>
                        </xul:template>
                    </xul:menupopup>
                </xul:menulist>
            </xul:hbox>
        </content>
        <implementation>
            <method name="reloadValue">
                <body><![CDATA[
                  if (this.constructed) {
                    var value = this.getDocId();
                    if (! value) value=this.getValue();
                    var menuList = this.getChild('displayValue');
                    var nbItems = menuList.itemCount;
                    for(var i = 0; i < nbItems; i++) {
                        var item = menuList.getItemAtIndex(i);
                        if( (item.localName == 'menuitem') && (item.value == value) ){
                            menuList.selectedIndex = i;
                            break;
                        }
                    }
                    var icon=null;
                    var sdoc=docManager.getLocalDocument({initid:value});
                    if (! sdoc) sdoc=docManager.getLocalDocument({name:this.getAttribute('relationFamily')});
                    if (sdoc) {
                      icon=sdoc.getIcon();
                    }
                    
                    if (icon) {
                    
                          menuList.image='file://'+icon;
                    }
                  } else {
                     // first call
                     if (this.getAttribute('relationFamily')) {
                        this.getChild('famid').textContent = this.getAttribute('relationFamily');
                        this.getChild('filterid').textContent = this.getValue();
                        this.getChild('displayValue').menupopup.builder.rebuild(); 
                        this.constructed = true;
                        if (this.getAttribute('relationFamily')) {
                            var choose=this.getChild('choose');
                            choose.label='choose '+docManager.getFamilyTitle({name:this.getAttribute('relationFamily')});
                        }
                        this.reloadValue();
                      } 
                  }
                ]]></body>
            </method>
            <method name="unSelect">
                <body><![CDATA[
                    var menuList = this.getChild('displayValue');
                    menuList.selectedIndex=0;
                ]]></body>
            </method>
            <method name="getDocId">
                <body><![CDATA[
                    var menuList = this.getChild('displayValue');
                    return menuList.value;
                ]]></body>
            </method>
            <method name="getDocTitle">
                <body><![CDATA[
                    var menuList = this.getChild('displayValue');
                    return menuList.label;
                ]]></body>
            </method>
            
        </implementation>
        <handlers>
            <handler event="change"><![CDATA[
                //alert('change');
            ]]></handler>
            <handler event="focus"><![CDATA[
                if (this.getChild('filterid').textContent != '%') {
                 // optimize : call complete query when use it
                   this.getChild('filterid').textContent='%';
                   var menuList = this.getChild('queryList');
                   menuList.builder.rebuild();
                   this.reloadValue();
                }
            ]]>
            </handler>
            <handler event="command"><![CDATA[
              if (this.getAttribute("noset") != "true") {
                this.setValue(this.getDocId());
              } else {
                this.reloadValue();
              }
            ]]></handler>
        </handlers>
    </binding>
    <binding id="docid-multiple-attr-edit" extends="&systemBindingsDirPath;/leaf-attributes-edit.xml#leaf-attr-edit">
        <content>
            <xul:hbox xbl:inherits="attrid,collapsed" flex="1" class="dcpAttribute docid">
                <dcpAttributeLabel anonid="attrLabel" xbl:inherits="value=label" />
                <xul:hbox>
                    <xul:vbox>
                        <xul:listbox xbl:inherits="disabled" anonid="multiBox" flex="1" seltype="multiple">
                        </xul:listbox>
                        <dcpAttribute  anonid="selector" xbl:inherits="attrid,label,relationFamily,visibility,type,disabled"
                            nolabel="true" noset="true" multiple="false" />
                    </xul:vbox>
                    <xul:button anonid="clearSelection" disabled="true" label="Clear selection" />
                </xul:hbox>
            </xul:hbox>
        </content>
        <implementation>
            <field name="clearSelection"><![CDATA[
                this.getChild('clearSelection');
            ]]></field>
            <field name="multiBox"><![CDATA[
                this.getChild('multiBox');
            ]]></field>
            <method name="reloadValue">
                <body><![CDATA[
                    Components.utils.import("resource://modules/formater.jsm");
            
            var docids=this.getDocIds();
            var olistbox=this.multiBox;
            while (olistbox.getRowCount() > 0) {
                olistbox.removeItemAt(0);
            }
            var ltitle;
            for (var i=0;i< docids.length;i++) {
                ltitle=formater.getDocumentTitle({initid:docids[i]});
                olistbox.appendItem(ltitle, docids[i]);
            }
            olistbox.setAttribute('rows', docids.length);
                ]]></body>
            </method>
            <method name="getDocIds">
                <body><![CDATA[
                    return this.getValue();
                ]]></body>
            </method>
            <method name="getValues">
                <body><![CDATA[
                       var values=[];
                       var olistbox=this.multiBox;
                       var nbRows=olistbox.getRowCount();
                       for (var i=0;i<nbRows;i++) {
                          if (olistbox.getItemAtIndex(i).value) {
                            values.push(olistbox.getItemAtIndex(i).value);
                            }
                       }
                       return values;
                ]]></body>
            </method>
        </implementation>
        <handlers>
            <handler event="change"><![CDATA[
                alert('change');
            ]]></handler>
            <handler event="click" button="0"><![CDATA[
                if(event.originalTarget == this.clearSelection){
                  
                    
                    var olistbox=this.multiBox;
                    
                    var sel=this.getChild('selector');
                    sel.unSelect();
                    var sels=olistbox.selectedItems;
                    while (olistbox.selectedItems.length > 0) {
                       olistbox.removeItemAt(olistbox.getIndexOfItem(olistbox.selectedItems[0]));
                    }
                    this.setValue(this.getValues());
                }
            ]]></handler>
            <handler event="select"><![CDATA[
                if(event.originalTarget == this.multiBox){
                   var nbRows=this.multiBox.selectedCount;
                   if (nbRows > 0) {
                     this.clearSelection.disabled=false;
                   } else {
                     this.clearSelection.disabled=true;
                   }
                }
            ]]></handler>
            <handler event="command"><![CDATA[
               var sel=this.getChild('selector');
               var newDocumentId=sel.getDocId();
               
               if (newDocumentId > 0) {
                   var olistbox=this.getChild("multiBox");
                   var nbRows=olistbox.getRowCount();
                   var isAlreadySet=false;
                   for (var i=0;i<nbRows;i++) {
                      if (olistbox.getItemAtIndex(i).value == newDocumentId) {
                        isAlreadySet=true;
                        break;
                      }
                   }
                   if (! isAlreadySet) {
                   
                       var newtitle=sel.getDocTitle();
           
                       var values=this.getValues();
                       values.push(newDocumentId);
                      
                       this.setValue(values);
                    }
                }
            ]]></handler>
        </handlers>
    </binding>
    <binding id="docid-multiple2-attr-edit" extends="&systemBindingsDirPath;/docid-attributes-edit.xml#docid-multiple-attr-edit">
        <implementation>
            <method name="getDocIds">
                <body><![CDATA[
                if (! this.getValue()) return '';
                    return this.getValue().split('<BR>');
                ]]></body>
            </method><method name="checkValue">
                <parameter name="value" />
                <body><![CDATA[
                    return value.join('<BR>');
                ]]></body>
            </method>
        </implementation>
    </binding>
</bindings>