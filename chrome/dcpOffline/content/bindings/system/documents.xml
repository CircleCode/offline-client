<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE bindings>
<bindings
    id="documentBindings"
    xmlns="http://www.mozilla.org/xbl"
    xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
    xmlns:xbl="http://www.mozilla.org/xbl">

    <binding id="document">
        <!--<ressources>
            <stylesheet src="chrome://dcpoffline/skin/document.css"/>
            </ressources> -->

        <implementation>

            <field
                name="toolbar"
                readonly="true">
                this.getElementsByTagNameNS("http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul",'dcpDocMenu')[0];
            </field>

            <!-- mode: "edit" or "view", default is "view" -->
            <property
                name="mode"
                readonly="true"
                onget="return this.getAttribute('mode');">
            </property>

            <property
                name="initid"
                readonly="true">
                <getter><![CDATA[
                    Components.utils.import("resource://modules/logger.jsm");
                    if(this.doc){
                        return this.doc.getInitid();
                    } else {
                        return this.getAttribute('initid');
                    }
                ]]></getter>
            </property>

            <property
                name="localDocument"
                readonly="true">
                <getter><![CDATA[
                    return this.doc;
                ]]></getter>
            </property>

            <property
                name="focusedAttribute"
                readonly="true">
                <getter><![CDATA[
                    var e = document.activeElement;
                    while(e && (e.localName !== 'dcpAttribute')){
                        e = document.getBindingParent(e);
                    }
                    return e;
                ]]></getter>
            </property>

            <method name="switchMode">
                <parameter name="mode" />
                <body><![CDATA[
                if(mode){
                    var currentMode = this.getAttribute('mode');
                    if( mode !== currentMode ) {
                        if( (mode !== 'view') && (mode !== 'edit') ){
                            throw new BindException("invalid mode provided; only 'view' and 'edit' are valid");
                        }
                        else{
                            Components.utils.import("resource://modules/events.jsm");
                            var param = {
                                documentId : this.initid,
                                mode : mode
                            };
                            applicationEvent.publish("askForOpenDocument", param);
                        }
                    }
                }
                ]]></body>
            </method>
            
            <method name="reloadMenu">
                <body><![CDATA[
                    var toolbar = this.toolbar;
                    var oldBinding = window.getComputedStyle(toolbar, null).MozBinding;
                    toolbar.style.MozBinding = 'url("chrome://dcpoffline/content/bindings/system/empty.xml#empty")';
                    setTimeout(function() {toolbar.style.MozBinding = oldBinding;}, 5);
                ]]></body>
            </method>

            <method name="getValue">
                <parameter name="attrid" />
                <body><![CDATA[
                    return this.doc.getValue(attrid);
                ]]></body>
            </method>

            <method name="getProperty">
                <parameter name="propertyid" />
                <body><![CDATA[
                    return this.doc.getProperty({propertyid: propertyid});
                ]]></body>
            </method>

            <method name="onBeforeLocalSave">
                <body><![CDATA[return true;]]></body>
            </method>

            <method name="onAfterLocalSave">
                <body><![CDATA[return true;]]></body>
            </method>

            <method name="onBeforeLocalCreate">
                <body><![CDATA[return true;]]></body>
            </method>

            <method name="onAfterLocalCreate">
                <body><![CDATA[return true;]]></body>
            </method>

            <method name="save">
                <body><![CDATA[
                    try {
                        this.checkRequiredAttributes();
                        if(this.doc.inMemoryDoc){
                            this.onBeforeLocalCreate();
                            this.doc.store({recomputeTitle:true});
                            this.onAfterLocalCreate();
                        } else {
                            this.onBeforeLocalSave();
                            this.doc.save({recomputeTitle:true});
                            this.onAfterLocalSave();
                        }
                        this.switchMode("view");
                        var param = {
                          documentId : this.initid
                        };
                        applicationEvent.publish("postSaveDocument", param);
                    } catch(e) {
                        logError(e, "error on document ["+this.initid+"] save");
                        alert(e);
                    }
                ]]></body>
            </method>

            <method name="saveFocusedAttribute">
                <body><![CDATA[
                    var focusedAttribute = this.focusedAttribute;
                    if(focusedAttribute){
                        return focusedAttribute.saveValue();
                    } else {
                        return true;
                    }
                ]]></body>
            </method>

            <method name="remove">
                <body><![CDATA[
                    try {
                        Components.utils.import("resource://modules/StringBundle.jsm");
                        var translate = new StringBundle( "chrome://dcpoffline/locale/bindings/document-binding.properties");
                        var msgTitle=translate.get("document.confirm.remove.title");
                        var msgText=translate.get("document.confirm.remove.message",[this.doc.getTitle()]);
                        var wantDelete = Components.classes["@mozilla.org/embedcomp/prompt-service;1"]
                                .getService(Components.interfaces.nsIPromptService)
                                .confirm(null, msgTitle, msgText);
                        if(wantDelete){
                            this.doc.remove(); 
                            var param = {
                                documentId : this.initid
                            };
                            applicationEvent.publish("postRemoveDocument", param);
                            this.close();
                        }
                    } catch(e) {
                        logError(e, "error on document ["+this.initid+"] save");
                        alert('(FIXME) ' + e);
                    }
                ]]></body>
            </method>

            <method name="close">
                <body><![CDATA[
                    Components.utils.import("resource://modules/events.jsm");
                    var param = {
                        documentId : this.initid
                    };
                    applicationEvent.publish("askForCloseDocument", param);
                ]]></body>
            </method>

            <method name="reinit">
                <parameter name="reopen" />
                <body><![CDATA[
                    Components.utils.import("resource://modules/events.jsm");
                    Components.utils.import("resource://modules/docManager.jsm");
                    
                    docManager.initDocInstance({initid: this.initid});
                    var param = {
                        documentId : this.initid,
                        openAfterClose: (reopen)?this.initid:0
                    };
                    applicationEvent.publish("askForCloseDocument", param);
                ]]></body>
            </method>

            <method name="warning">
                <parameter name="exceptionMessage" />
                <body><![CDATA[
                    if (exceptionMessage.syncMessage) {
                       alert(exceptionMessage.syncMessage);
                    } else {
                       alert(exceptionMessage);
                    }
                ]]></body>
            </method>

            <method name="preClose">
                <parameter name="config" />
                <body><![CDATA[
                    if(this.doc.isDirty()){
                        try {
                            Components.utils.import("resource://modules/StringBundle.jsm");
                            Components.utils.import("resource://modules/events.jsm");
                            var translate = new StringBundle( "chrome://dcpoffline/locale/bindings/document-binding.properties");
                            applicationEvent.publish("askForOpenDocument", {documentId : this.initid});
                            
                            var prompts = Components.classes["@mozilla.org/embedcomp/prompt-service;1"]
                                    .getService(Components.interfaces.nsIPromptService);
            
                            var check = {value: false}; // default the checkbox to false
                            // (this checkBox may be used later for 'do not ask again')
                            
                            var flags = prompts.BUTTON_POS_0 * prompts.BUTTON_TITLE_SAVE +
                                        prompts.BUTTON_POS_1 * prompts.BUTTON_TITLE_CANCEL  +
                                        prompts.BUTTON_POS_2 * prompts.BUTTON_TITLE_DONT_SAVE;
                            
                            var msgTitle=translate.get("document.confirm.abandon.changes.title");
                            var msgText=translate.get("document.confirm.abandon.changes",[this.doc.getTitle()]);
                            
                            var button = prompts.confirmEx(
                                null,
                                msgTitle,
                                msgText,
                                flags,
                                "",
                                "",
                                "",
                                null, //here comes the don't ask me again message
                                check
                            );
                            
                            switch(button){
                                case 0: //save and continue
                                    return this.save();
                                    break;
                                case 1: //cancel
                                    return false;
                                    break;
                                case 2: //do not save and continue
                                    return true;
                                    break;
                            }
                        } catch(e) {
                            logError(e, "document ["+this.initid+"] preclose");
                            return false;
                        }
                    } else {
                        return true;
                    }
                ]]></body>
            </method>

            <method name="revert">
                <body><![CDATA[
                    Components.utils.import("resource://modules/network.jsm");
                    Components.utils.import("resource://modules/fdl-context.jsm");
                    Components.utils.import("resource://modules/docManager.jsm");
                    Components.utils.import("resource://modules/offlineSynchronize.jsm");
                    
                    if(networkChecker.isOffline()){
                        alert("(FIXME) you can only revert when online");
                    } else {
                        try{
                            var domainId = docManager.getActiveDomain();
                            var domain = context.getDocument({
                                id : domainId
                            });
                            var docid=this.initid;
                            var me=this;
                            offlineSync.revertDocument({
                                domain: domain,
                                initid: this.initid,
                                onAfterRevert:function() {
                                   me.reinit();
                                   applicationEvent.publish("postSynchronize",{});
                                   tryToOpenDocument({documentId : docid});
                                }
                            });

                        } catch(e) {
                            logError(e, "error when reverting document "+this.initid);
                            this.warning(e);
                        }
                    }
                ]]></body>
            </method>

            <method name="unlink">
                <body><![CDATA[
                    Components.utils.import("resource://modules/network.jsm");
                    Components.utils.import("resource://modules/fdl-context.jsm");
                    Components.utils.import("resource://modules/docManager.jsm");
                    Components.utils.import("resource://modules/offlineSynchronize.jsm");

                    if(networkChecker.isOffline()){
                        alert("(FIXME) you can only unlink when online");
                    } else {
                        try{
                            var domainId = docManager.getActiveDomain();
                            var domain = context.getDocument({
                                id : domainId
                            });
                            var me=this;
                            offlineSync.unlinkDocument({
                                domain: domain,
                                initid: this.initid,
                                onAfterUnlink:function() {
                                   me.reinit();
                                   applicationEvent.publish("postSynchronize",{});
                                }
                            });

                        } catch(e) {
                            logError(e, "error when unlink document "+this.initid);
                            this.warning(e);
                        }
                    }
                ]]></body>
            </method>
            <method name="book">
                <body><![CDATA[
                    Components.utils.import("resource://modules/network.jsm");
                    Components.utils.import("resource://modules/fdl-context.jsm");
                    Components.utils.import("resource://modules/docManager.jsm");
                    Components.utils.import("resource://modules/offlineSynchronize.jsm");

                    if(networkChecker.isOffline()){
                        alert("(FIXME) you can only book when online");
                    } else {
                        try{
                            var domainId = docManager.getActiveDomain();
                            var domain = context.getDocument({
                                id : domainId
                            });

                            var docid=this.initid;
                            var me=this;
                            offlineSync.bookDocument({
                                domain: domain,
                                initid: this.initid,
                                onAfterBook:function() {
                                   me.reinit();
                                   applicationEvent.publish("postSynchronize",{});
                                   tryToOpenDocument({documentId : docid});
                                }
                            });

                        } catch(e) {
                            logError(e, "error when booking document "+this.initid);
                            this.warning(e);
                        }
                    }
                ]]></body>
            </method>

            <method name="unbook">
                <body><![CDATA[
                    Components.utils.import("resource://modules/network.jsm");
                    Components.utils.import("resource://modules/fdl-context.jsm");
                    Components.utils.import("resource://modules/docManager.jsm");
                    Components.utils.import("resource://modules/offlineSynchronize.jsm");

                    if(networkChecker.isOffline()){
                        alert("(FIXME) you can only book when online");
                    } else {
                        try{
                            var domainId = docManager.getActiveDomain();
                            var domain = context.getDocument({
                                id : domainId
                            });
                            var docid=this.initid;
                            var me=this;
                            offlineSync.unbookDocument({
                                domain: domain,
                                initid: this.initid,

                                onAfterUnbook:function() {
                                   me.reinit();
                                   applicationEvent.publish("postSynchronize",{});
                                   tryToOpenDocument({documentId : docid});
                                }
                            });


                        } catch(e) {
                            logError(e, "error when unbooking document "+this.initid);
                            this.warning(e);
                        }
                    }
                ]]></body>
            </method>

            <method name="checkRequiredAttributes">
                <body><![CDATA[
                    var requiredAttributes = this.querySelectorAll('dcpAttribute[required=true]');
                    var mustFillAttributes = [];
                    var mustFillAttributeTitles = [];
                    for (var i = 0; i < requiredAttributes.length; ++i) {
                        var attribute = requiredAttributes[i];
                        if(attribute.getValue() == ''){
                            mustFillAttributes.push(attribute);
                            mustFillAttributeTitles.push(attribute.label);
                        }
                    }
                    if(mustFillAttributes.length){
                        if(mustFillAttributes[0].inputField.focus){
                            mustFillAttributes[0].inputField.focus();
                        }
                        Components.utils.import("resource://modules/StringBundle.jsm");
                        var translate = new StringBundle( "chrome://dcpoffline/locale/bindings/document-binding.properties");
                        var msg = translate.get("document.mustFillAttributes.popup.intro")
                            + "\n"
                            + mustFillAttributeTitles.join("\n");
                        throw msg;
                    }
                ]]></body>
            </method>

            <constructor><![CDATA[
                try{
                    Components.utils.import("resource://modules/events.jsm");
                    
                    Components.utils.import("resource://modules/docManager.jsm");
                    this.doc = docManager.getLocalDocument({initid : this.initid});
                    
                    var flex = this.getAttribute('flex') || 1;
                    this.setAttribute('flex', flex);
                    
                    var state = this.doc.getProperty('state');
                    if(state){
                        this.setAttribute('state', state);
                    }
                    
                    /*
                    var hasMode = this.hasAttribute('mode');
                    if(! hasMode ){
                        this.setAttribute('mode', 'view');
                    } else {
                        var mode = this.getAttribute('mode');
                        if( (mode !== 'view') && (mode !== 'edit') ){
                            this.setAttribute('mode', 'view');
                        }
                    }
                    */
                    
                    this.hooks = this.hooks || {};
                    this.hooks.preClose = function preCloseHook(config){
                        if(config.documentId == this.initid){
                            return this.preClose(config);
                        }
                        return true
                    }
                    
                    applicationEvent.subscribe("preCloseDocument", this.hooks.preClose, {scope: this});
                    
                    //XXX: register as a render
                } catch(e){
                    Components.utils.import("resource://modules/logger.jsm");
                    logError(e, "constructor for document ["+this.initid+"] in mode "+this.mode);
                    throw(e);
                }
                return true;
            ]]></constructor>

            <destructor><![CDATA[
                try{
                    Components.utils.import("resource://modules/events.jsm");
                    
                    applicationEvent.unsubscribe("preCloseDocument", this.hooks.preClose);
                    
                    //TODO: unregister as a render
                    return true;
                } catch(e){
                    logError(e, "destructor for document ["+this.initid+"] in mode "+this.mode);
                }
            ]]></destructor>

        </implementation>
        <!--
            <handlers>

            </handlers>
        -->
    </binding>

</bindings>
