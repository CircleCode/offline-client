<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE bindings [
      <!ENTITY % leaf-attributes-bindingDTD SYSTEM "chrome://dcpoffline/locale/bindings/leaf-attributes-binding.dtd" >
      <!ENTITY separator "&#160;:&#160;" >
      <!ENTITY systemBindingsDirPath "chrome://dcpoffline/content/bindings/system" >
      %leaf-attributes-bindingDTD;
]>

<bindings
    id="leaf-attributes-binding"
    xmlns="http://www.mozilla.org/xbl"
    xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
    xmlns:xbl="http://www.mozilla.org/xbl"
    xmlns:html="http://www.w3.org/1999/xhtml">

    <binding
        id="leaf-attr-edit"
        extends="&systemBindingsDirPath;/base-attributes.xml#base-attr">
        <implementation>

            <field
                name="inputField"><![CDATA[
                this.getChild('displayValue').inputField;
            ]]></field>

            <property
                name="index"
                readonly="false">
                <getter><![CDATA[
                    if(this.hasAttribute('index')){
                        return this.getAttribute('index');
                    } else {
                        return -1;
                    }
                ]]></getter>
                <setter><![CDATA[
                    this.setAttribute('index', val);
                    this.reloadValue();
                ]]></setter>
            </property>

            <property
                name="bindingValue"
                readonly="true"
                onget="return this.inputField.value">
            </property>

            <property
                name="value"
                onget="this.getValue();"
                onset="this.setValue(val);">
            </property>

            <method
                name="checkValue">
                <parameter
                    name="value" />
                <body><![CDATA[
                    return value;
                ]]></body>
            </method>

            <method
                name="setValue">
                <parameter
                    name="value" />
                <body><![CDATA[
                    try{
                        var value = this.checkValue(value);
                        this.doc.setValue(this.attrid, value, this.index);
                        this.reloadValue();
                        return true;
                    } catch(e){
                        Components.utils.import("resource://modules/logger.jsm");
                        logError(e);
                    }
                    return false;
                ]]></body>
            </method>

            <method
                name="reloadValue">
                <body><![CDATA[
                    var valueNode = this.getChild('displayValue');
                    if(valueNode){
                        valueNode.value = this.getValue();
                    } else {
                        Components.utils.import("resource://modules/exceptions.jsm");
                        throw BindException("no displayValue child for attr ["+ this.attrid + "] in doc ["+this.doc.getInitid() + "]");
                    }
                ]]></body>
            </method>

            <method
                name="setCustomValidity">
                <parameter
                    name="message" />
                <body><![CDATA[
                    this.inputField.setCustomValidity(message);
                    if(message){
                        alert ("(FIXME) " + message);
                        this.inputField.focus();
                        //XXX: selectAll could be better
                    }
                ]]></body>
            </method>

            <constructor><![CDATA[
                var visibility = this.getAttribute('visibility');
                if (visibility == 'S') {
                    this.setAttribute('disabled', true);
                } else if( visibility == 'W' || visibility == 'O' ){
                    this.removeAttribute('disabled', false);
                } else {
                    this.setAttribute('collapsed', true);
                }

                if(this.doc.inMemoryDoc){
                    if(this.hasAttribute('defaultValue')){
                        this.setValue(this.getAttribute('defaultValue'));
                    }
                } else {
                    this.reloadValue();
                }
            ]]></constructor>

        </implementation>

        <handlers>
            <handler
                event="change"><![CDATA[
                this.setValue(this.bindingValue);
            ]]></handler>
        </handlers>
    </binding>

    <!-- Text attributes -->

    <binding
        id="text-attr-edit"
        extends="&systemBindingsDirPath;/leaf-attributes-edit.xml#leaf-attr-edit">
        <content>
            <xul:hbox
                xbl:inherits="attrid,collapsed"
                flex="1"
                class="dcpAttribute text">
                <dcpAttributeLabel
                    anonid="attrLabel"
                    xbl:inherits="mode,required,value=label" />
                <xul:textbox
                    anonid="displayValue"
                    class="dcpValue"
                    multiline="false"
                    xbl:inherits="disabled" />
            </xul:hbox>
        </content>
    </binding>

    <binding
        id="longtext-attr-edit"
        extends="&systemBindingsDirPath;/leaf-attributes-edit.xml#leaf-attr-edit">
        <content>
            <xul:hbox
                xbl:inherits="attrid,collapsed"
                flex="1"
                class="dcpAttribute longtext">
                <dcpAttributeLabel
                    anonid="attrLabel"
                    xbl:inherits="mode,required,value=label" />
                <xul:textbox
                    anonid="displayValue"
                    class="dcpValue"
                    multiline="true"
                    xbl:inherits="disabled" />
            </xul:hbox>
        </content>
    </binding>

    <binding
        id="htmltext-attr-edit"
        extends="&systemBindingsDirPath;/leaf-attributes-edit.xml#leaf-attr-edit">
        <content>
            <xul:vbox
                xbl:inherits="attrid"
                flex="1"
                class="dcpAttribute longtext">
                <dcpAttributeLabel
                    anonid="attrLabel"
                    xbl:inherits="mode,required,value=label" />
                <xul:iframe
                    anonid="displayValue"
                    src="chrome://ckeditor/content/bindings/ckeditor/ckeditor.html"
                    class="dcpValue"
                    flex="1" />
            </xul:vbox>
        </content>
        <implementation>
            <method
                name="reloadValue">
                <body><![CDATA[
                    var contentWindow = this.getChild('displayValue').contentWindow;

                    var contentDocument = this.getChild('displayValue').contentDocument;

                    var value = this.getValue();

                    var that = this;

                    //XXX: this is suboptimal (should use DOMFrameContentLoaded)
                    var initEditor = function(){                        
                        if(contentWindow.getEditorWrapper){
                            var editorWrapper = contentWindow.getEditorWrapper();
                            editorWrapper.innerHTML = value;
                            var editor = contentWindow.initEditor();
                            editor.on('blur', function(){this.setValue(editor.getData())}, that);
                        } else {
                            setTimeout(initEditor,50);
                        }
                    };

                    setTimeout(initEditor,50);
                ]]></body>
            </method>
        </implementation>
    </binding>

    <!-- Numeric attributes -->

    <binding
        id="int-attr-edit"
        extends="&systemBindingsDirPath;/leaf-attributes-edit.xml#leaf-attr-edit">
        <content>
            <xul:hbox
                xbl:inherits="attrid,collapsed"
                flex="1"
                class="dcpAttribute numeric int">
                <dcpAttributeLabel
                    anonid="attrLabel"
                    xbl:inherits="mode,required,value=label" />
                <xul:textbox
                    anonid="displayValue"
                    class="dcpValue"
                    xbl:inherits="disabled" />
            </xul:hbox>
        </content>

        <implementation>
            <method
                name="checkValue">
                <parameter
                    name="value" />
                <body><![CDATA[
                    if( isNaN(value) ){
                        Components.utils.import("resource://modules/events.jsm");
                        this.setCustomValidity("'" + value +"' is not a number");
                        throw new attrCheckException("'" + value +"' is not a number");
                    } else {
                        this.setCustomValidity("");
                    }

                    return value;
                ]]></body>
            </method>
        </implementation>
    </binding>

    <binding
        id="double-attr-edit"
        extends="&systemBindingsDirPath;/leaf-attributes-edit.xml#leaf-attr-edit">
        <content>
            <xul:hbox
                xbl:inherits="attrid"
                flex="1"
                class="dcpAttribute numeric double">
                <dcpAttributeLabel
                    anonid="attrLabel"
                    xbl:inherits="mode,required,value=label" />
                <xul:textbox
                    anonid="displayValue"
                    class="dcpValue"
                    xbl:inherits="disabled" />
            </xul:hbox>
        </content>

        <implementation>
            <method
                name="checkValue">
                <parameter
                    name="value" />
                <body><![CDATA[
                    //XXX: do a better sanitization (spaces, english format, etc...)
                    var parse_double = /^[0-9]+([.,][0-9]+)?$/
                    if( value.match(parse_double) ){
                        Components.utils.import("resource://modules/events.jsm");
                        this.setCustomValidity("'" + value +"' is not a number");
                        throw new attrCheckException("'" + value +"' is not a number");
                    }
                    return value.replace(',','.');
                ]]></body>
            </method>
        </implementation>
    </binding>

    <binding
        id="money-attr-edit"
        extends="&systemBindingsDirPath;/leaf-attributes-edit.xml#double-attr-edit">
        <!-- For now, money attributes are the same as double -->
    </binding>

    <!-- Date attributes -->

    <binding
        id="time-attr-edit"
        extends="&systemBindingsDirPath;/leaf-attributes-edit.xml#leaf-attr-edit">
        <content>
            <xul:hbox
                xbl:inherits="attrid"
                flex="1"
                class="dcpAttribute time">
                <dcpAttributeLabel
                    anonid="attrLabel"
                    xbl:inherits="mode,required,value=label" />
                <xul:timepicker
                    anonid="displayValue"
                    class="dcpValue" />
            </xul:hbox>
        </content>

        <implementation>
            <field
                name="inputField"><![CDATA[
                this.getChild('displayValue');
            ]]></field>
        </implementation>

    </binding>

    <binding
        id="date-attr-edit"
        extends="&systemBindingsDirPath;/leaf-attributes-edit.xml#leaf-attr-edit">
        <content>
            <xul:hbox
                xbl:inherits="attrid"
                flex="1"
                class="dcpAttribute date">
                <dcpAttributeLabel
                    anonid="attrLabel"
                    xbl:inherits="mode,required,value=label" />
                <xul:datepicker
                    anonid="displayValue"
                    class="dcpValue"
                    type="popup" />
            </xul:hbox>
        </content>

        <implementation>
            <field
                name="inputField"><![CDATA[
                this.getChild('displayValue');
            ]]></field>
        </implementation>
    </binding>

    <binding
        id="timestamp-attr-edit"
        extends="&systemBindingsDirPath;/leaf-attributes-edit.xml#leaf-attr-edit">
        <content>
            <xul:hbox
                xbl:inherits="attrid"
                flex="1"
                class="dcpAttribute date">
                <dcpAttributeLabel
                    anonid="attrLabel"
                    xbl:inherits="mode,required,value=label" />
                <dcpDateTimePicker
                    anonid="displayValue"
                    class="dcpValue" />
            </xul:hbox>
        </content>

        <implementation>
            <field
                name="inputField"><![CDATA[
                this.getChild('displayValue');
            ]]></field>
        </implementation>
    </binding>

    <!-- File attributes -->

    <binding
        id="file-attr-edit"
        extends="&systemBindingsDirPath;/leaf-attributes-edit.xml#leaf-attr-edit">
        <content>
            <xul:hbox
                xbl:inherits="attrid"
                flex="1"
                class="dcpAttribute file">
                <dcpAttributeLabel
                    anonid="attrLabel"
                    xbl:inherits="mode,required,value=label" />
                <xul:label
                    anonid="displayValue"
                    class="dcpValue text-link" />
                <xul:box
                    anonid="buttons">
                    <xul:button
                        anonid="modifyButton"
                        label="&attribute.file.button.modify;"
                        class="simple-button"
                        crop="center" />
                    <xul:button
                        anonid="deleteButton"
                        class="delete simple-button"
                        tooltiptext="&attribute.file.button.delete;" />
                </xul:box>
            </xul:hbox>
        </content>

        <implementation>

            <field
                name="inputField"><![CDATA[
                this.getChild('displayValue');
            ]]></field>

            <field
                name="modifyButton"><![CDATA[
                this.getChild('modifyButton');
            ]]></field>

            <field
                name="deleteButton"><![CDATA[
                this.getChild('deleteButton');
            ]]></field>

            <field
                name="filters">
                var nsIFilePicker =
                Components.interfaces.nsIFilePicker;
                nsIFilePicker.filterAll | nsIFilePicker.filterApps;
            </field>

            <property
                name="bindingValue"
                readonly="true">
                <getter><![CDATA[
                    Components.utils.import("resource://modules/fileManager.jsm");
                    try{
                        var aFile = fileManager.getFile({
                            initid: this.doc.getInitid(),
                            attrid: this.attrid,
                            index: this.index
                        });
                        if(aFile && aFile.exists()){
                            return aFile.path;
                        }
                    } catch(e) {
                        logError(e,
                            "bindingValue of attribute ["
                            + this.attrid
                            + "] on document ["
                            + this.doc.getInitid()
                            + "] at index ["
                            + this.index
                            +"]"
                        );
                    }
                ]]></getter>
            </property>

            <method
                name="setValue">
                <!-- value is a path -->
                <parameter
                    name="value" />
                <body><![CDATA[
                    try{
                        Components.utils.import("resource://modules/fileManager.jsm");

                        var value = this.checkValue(value);

                        //copy file and store it
                        var aFile = Components.classes["@mozilla.org/file/local;1"].createInstance(Components.interfaces.nsILocalFile);
                        aFile.initWithPath(value);
                        fileManager.saveFile({
                            initid: this.doc.getInitid(),
                            attrid: this.attrid,
                            writable: true,
                            basename: aFile.leafName,
                            aFile: aFile,
                            forceCopy: true,
                            index: this.index
                        });

                        this.reloadValue();
                        return true;
                    } catch(e){
                        Components.utils.import("resource://modules/logger.jsm");
                        logError(e);
                    }
                    return false;
                ]]></body>
            </method>

            <method
                name="checkValue">
                <parameter
                    name="value" />
                <body><![CDATA[
                    var aFile = Components.classes["@mozilla.org/file/local;1"].createInstance(Components.interfaces.nsILocalFile);
                    aFile.initWithPath(value);
                    if(aFile.exists()){
                        return value;
                    } else {
                        throw new attrCheckException("the file '" + value +"' does not exists");
                    }
                ]]></body>
            </method>

            <method
                name="reloadValue">
                <body><![CDATA[
                    Components.utils.import("resource://modules/fileManager.jsm");
                    try{
                        var aFile = fileManager.getFile({
                            initid:this.doc.getInitid(),
                            attrid:this.attrid,
                            index:this.index
                        });
                        if(aFile && aFile.exists()){
                            this.inputField.value = aFile.leafName;
                        } else {
                            this.inputField.value = "";
                        }
                    } catch(e) {
                        this.inputField.value = "";
                    }
                ]]></body>
            </method>

            <method
                name="chooseFile">
                <body><![CDATA[
                    const nsIFilePicker = Components.interfaces.nsIFilePicker;

                    var fp = Components.classes["@mozilla.org/filepicker;1"].createInstance(nsIFilePicker);
                    fp.init(window, "Choose a file", nsIFilePicker.modeOpen); // TODO: dialog title
                    fp.appendFilters(this.filters);

                    var rv = fp.show();
                    if (rv == nsIFilePicker.returnOK) {
                        try{
                            this.setValue(fp.file.path);
                        } catch(e){
                            alert(e);
                        }
                    }
                ]]></body>
            </method>

            <method
                name="deleteFile">
                <body><![CDATA[
                    Components.utils.import("resource://modules/fileManager.jsm");
                    try{
                        fileManager.deleteFile({
                            initid:this.doc.getInitid(),
                            attrid:this.attrid,
                            index:this.index
                        });
                        this.reloadValue();
                    } catch(e) {
                        logError(e, "could not delete file for document"
                                + " initid: " + this.doc.getInitid()
                                + " attrid: " + this.attrid
                                + " index: " + this.index);
                    }
                ]]></body>
            </method>

            <method
                name="openFile">
                <body><![CDATA[
                    Components.utils.import("resource://modules/fileManager.jsm");
                    fileManager.openFile({
                        initid: this.doc.getInitid(),
                        attrid: this.attrid,
                        index: this.index
                    });
                ]]></body>
            </method>

        </implementation>

        <handlers>
            <handler
                event="click"
                button="0"><![CDATA[
                switch(event.originalTarget) {
                    case this.modifyButton :
                        this.chooseFile();
                        break;
                    case this.deleteButton :
                        this.deleteFile();
                        break;
                    case this.inputField :
                        this.openFile();
                        break;
                }
            ]]></handler>
        </handlers>
    </binding>

    <binding
        id="image-attr-edit"
        extends="&systemBindingsDirPath;/leaf-attributes-edit.xml#file-attr-edit">
        <content>
            <xul:hbox
                xbl:inherits="attrid"
                flex="1"
                class="dcpAttribute image">
                <dcpAttributeLabel
                    anonid="attrLabel"
                    xbl:inherits="mode,required,value=label" />
                <html:div
                    class="dcpValue">
                    <html:img
                        class="dcpImage"
                        anonid="imageField" />
                </html:div>
                <xul:box
                    anonid="buttons">
                    <xul:button
                        anonid="modifyButton"
                        label="&attribute.image.button.modify;"
                        class="simple-button"
                        crop="center" />
                    <xul:button
                        anonid="deleteButton"
                        class="delete simple-button"
                        tooltiptext="&attribute.image.button.delete;" />
                </xul:box>
            </xul:hbox>
        </content>

        <implementation>

            <field
                name="inputField"><![CDATA[
                this.getChild('imageField');
            ]]></field>

            <field
                name="filters">
                var nsIFilePicker =
                Components.interfaces.nsIFilePicker;
                nsIFilePicker.filterAll | nsIFilePicker.filterImages;
            </field>

            <method
                name="reloadValue">
                <body><![CDATA[
                    Components.utils.import("resource://modules/fileManager.jsm");
                    try{
                        var aFile = fileManager.getFile({
                            initid:this.doc.getInitid(),
                            attrid:this.attrid,
                            index:this.index
                        });
                        if(aFile && aFile.exists()){
                            Components.utils.import("resource://modules/formater.jsm");
                            var aFileURI = formater.getURI({file: aFile});
                            this.inputField.src = aFileURI.spec;
                            this.inputField.tooltipText = aFile.leafName;
                        } else {
                            this.inputField.src = "";
                            this.inputField.tooltipText = "";
                        }
                    } catch(e) {
                        this.inputField.src = "";
                        this.inputField.tooltipText = "";
                    }
                ]]></body>
            </method>

        </implementation>
    </binding>

    <!-- color attributes -->

    <binding
        id="color-attr-edit"
        extends="&systemBindingsDirPath;/leaf-attributes-edit.xml#leaf-attr-edit">
        <content>
            <xul:hbox
                xbl:inherits="attrid"
                flex="1"
                class="dcpAttribute enum">
                <dcpAttributeLabel
                    anonid="attrLabel"
                    xbl:inherits="mode,required,value=label" />
            </xul:hbox>
            <xul:colorpicker
                anonid="displayValue"
                type="button" />
        </content>

        <implementation>
        
            <field
                name="inputField"><![CDATA[
                this.getChild('displayValue');
            ]]></field>

            <property
                name="bindingValue"
                readonly="true"
                onget="return this.inputField.color">
            </property>

            <method
                name="reloadValue">
                <body><![CDATA[
                    var color = this.getValue();
                    dump("will set color at "+color+" for "+this.attrid+"\n");
                    var valueNode = this.getChild('displayValue');
                    if(valueNode){
                        setTimeout(function(){
                            document.getAnonymousElementByAttribute(valueNode, "anonid", 'colorbox')
                                    .setAttribute("style", "background-color: " + color);
                                    //Hack for https://bugzilla.mozilla.org/show_bug.cgi?id=497442
                        }, 100);
                        valueNode.color = this.getValue();
                    } else {
                        Components.utils.import("resource://modules/exceptions.jsm");
                        throw BindException("no displayValue child for attr ["+ this.attrid + "] in doc ["+this.doc.getInitid() + "]");
                    }
                ]]></body>
            </method>
            
        </implementation>
    </binding>

    <!-- enum attributes -->

    <binding
        id="enum-attr-edit"
        extends="&systemBindingsDirPath;/leaf-attributes-edit.xml#leaf-attr-edit">
        <content>
            <xul:hbox
                xbl:inherits="attrid"
                flex="1"
                class="dcpAttribute enum">
                <dcpAttributeLabel
                    anonid="attrLabel"
                    xbl:inherits="mode,required,value=label" />
                <xul:menulist
                    anonid="displayValue"
                    class="dcpValue">
                    <xul:menupopup
                        datasources="profile:storage.sqlite"
                        ref="*"
                        querytype="storage">
                        <xul:menuitem
                            value=""
                            label="&attribute.enum.empty;" />
                        <xul:template>
                            <xul:query><![CDATA[
                                SELECT key, label 
                                FROM enums
                                WHERE famid = :famid AND attrid = :attrid 
                            ]]>
                                <xul:param
                                    anonid="attrid"
                                    name="attrid" />
                                <xul:param
                                    anonid="famid"
                                    name="famid"
                                    type="integer" />
                            </xul:query>
                            <xul:action>
                                <xul:menuitem
                                    uri="?"
                                    value="?key"
                                    label="?label" />
                            </xul:action>
                        </xul:template>
                    </xul:menupopup>
                </xul:menulist>
            </xul:hbox>
        </content>

        <implementation>

            <field
                name="inputField"><![CDATA[
                this.getChild('displayValue');
            ]]></field>

            <method
                name="reloadValue">
                <body><![CDATA[
                    if(this.constructed){
                        var value = this.getValue().toString();
                        var menuList = this.getChild('displayValue');
                        var nbItems = menuList.itemCount;
                        for(var i = 0; i < nbItems; i++) {
                            var item = menuList.getItemAtIndex(i);
                            if( (item.localName == 'menuitem') && (item.value === value) ){
                                menuList.selectedIndex = i;
                                return;
                            }
                        }
                    }
                ]]></body>
            </method>

            <method
                name="rebuildList">
                <body><![CDATA[
                    this.getChild('attrid').textContent = this.attrid;
                    this.getChild('famid').textContent = this.doc.getProperty('fromid');
                    this.getChild('displayValue').menupopup.builder.rebuild();
                ]]></body>
            </method>

            <method
                name="_init">
                <body><![CDATA[
                    this.rebuildList();
                    this.constructed = true;
                    this.reloadValue();
                ]]></body>
            </method>

            <method
                name="_onItemSelected">
                <body><![CDATA[
                    this.setValue(this.bindingValue);
                ]]></body>
            </method>

            <constructor><![CDATA[
                this._init();
            ]]></constructor>

        </implementation>

        <handlers>
            <handler
                event="command"><![CDATA[
                this._onItemSelected();
            ]]></handler>
        </handlers>
    </binding>

    <binding
        id="enum-multiple-attr-edit"
        extends="&systemBindingsDirPath;/leaf-attributes-edit.xml#enum-attr-edit">
        <content>
            <xul:hbox
                xbl:inherits="attrid"
                flex="1"
                class="dcpAttribute enum">
                <dcpAttributeLabel
                    anonid="attrLabel"
                    xbl:inherits="mode,required,value=label" />
                <xul:vbox
                    flex="1">
                    <xul:richlistbox
                        anonid="multiBox"
                        seltype="multiple" />
                    <xul:hbox>
                        <xul:menulist
                            anonid="displayValue"
                            class="dcpValue">
                            <xul:menupopup
                                datasources="profile:storage.sqlite"
                                ref="*"
                                querytype="storage">
                                <xul:menuitem
                                    value=""
                                    label="&attribute.enum.empty;" />
                                <xul:template>
                                    <xul:query><![CDATA[
                                        SELECT key, label 
                                        FROM enums
                                        WHERE famid = :famid AND attrid = :attrid 
                                    ]]>
                                        <xul:param
                                            anonid="attrid"
                                            name="attrid" />
                                        <xul:param
                                            anonid="famid"
                                            name="famid"
                                            type="integer" />
                                    </xul:query>
                                    <xul:action>
                                        <xul:menuitem
                                            uri="?"
                                            value="?key"
                                            label="?label" />
                                    </xul:action>
                                </xul:template>
                            </xul:menupopup>
                        </xul:menulist>
                        <xul:button
                            anonid="deleteSelectionButton"
                            class="delete simple-button"
                            tooltiptext="&attribute.enum.multiple.button.clear.selection;" />
                    </xul:hbox>
                </xul:vbox>
            </xul:hbox>
        </content>

        <implementation>

            <field
                name="multiBox"><![CDATA[
                this.getChild('multiBox');
            ]]></field>

            <field
                name="deleteSelectionButton"><![CDATA[
                this.getChild('deleteSelectionButton');
            ]]></field>

            <property
                name="bindingValue"
                readonly="true">
                <getter><![CDATA[
                    var items = [];
                    for(var i = 0; i < this.multiBox.itemCount; i++){
                        items.push(this.multiBox.getItemAtIndex(i).value);
                    }
                    return items;
                ]]></getter>
            </property>

            <method
                name="reloadValue">
                <body><![CDATA[
                    Components.utils.import("resource://modules/formater.jsm");
                    
                    for(var i = this.multiBox.itemCount-1; i >=0 ; i--){
                        this.multiBox.removeItemAt(i);
                    }
                    
                    var values = this.getValue();
                    if(values !== ''){
                        if( !Array.isArray(values) ){
                            values = [values];
                        }
                        values.forEach(function(value){
                            var item = this.multiBox.appendItem(formater.getEnumLabel({
                                attrid:this.attrid,
                                famid:this.doc.getProperty('fromid'),
                                key:value
                            }), value);
                            //item.doStg();
                        }, this);
                    }
                    this.inputField.selectedIndex=0;
                ]]></body>
            </method>

            <method
                name="deleteSelection">
                <body><![CDATA[
                    for ( var i = this.multiBox.selectedItems.length -1; i>=0; i--){
                        this.multiBox.removeItemAt(this.multiBox.getIndexOfItem(this.multiBox.selectedItems[i]));
                    }
                    this.setValue(this.bindingValue);
                ]]></body>
            </method>

            <method
                name="_onItemSelected">
                <body><![CDATA[
                    var selectedItem = this.inputField.selectedItem;
                    if(selectedItem.value !== ''){
                        var addItem = true;
                        for(var i = 0; i < this.multiBox.itemCount; i++){
                            if( this.multiBox.getItemAtIndex(i).value === selectedItem.value ){
                                addItem = false;
                                break;
                            }
                        }
                        
                        if(addItem){
                            var value = this.bindingValue;
                            value.push(selectedItem.value);
                            this.setValue(value);
                            this.reloadValue();
                        } else {
                            this.inputField.selectedIndex=0;
                        }
                    }
                ]]></body>
            </method>

        </implementation>

        <handlers>
            <handler
                event="click"
                button="0"><![CDATA[
                if(event.originalTarget == this.deleteSelectionButton){
                    this.deleteSelection();
                }
            ]]></handler>
        </handlers>

    </binding>

</bindings>