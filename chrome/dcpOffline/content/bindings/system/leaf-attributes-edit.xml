<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE bindings [
      <!ENTITY % leaf-attributes-bindingDTD SYSTEM "chrome://dcpoffline/locale/bindings/leaf-attributes-binding.dtd" >
      <!ENTITY separator "&#160;:&#160;" >
      <!ENTITY systemBindingsDirPath "chrome://dcpoffline/content/bindings/system" >
      %leaf-attributes-bindingDTD;
]>

<bindings id="leaf-attributes-binding"
    xmlns="http://www.mozilla.org/xbl"
    xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
    xmlns:xbl="http://www.mozilla.org/xbl"
    xmlns:html="http://www.w3.org/1999/xhtml">
    
    <binding id="leaf-attr-edit" extends="&systemBindingsDirPath;/base-attributes.xml#base-attr">
        <implementation>
            
            <field name="inputField"><![CDATA[
                this.getChild('displayValue').inputField;
            ]]></field>
            
            <property name="index" readonly="false">
                <getter><![CDATA[
                    if(this.hasAttribute('index')){
                        return this.getAttribute('index');
                    } else {
                        return -1;
                    }
                ]]></getter>
                <setter><![CDATA[
                    this.setAttribute('index', val);
                    this.reloadValue();
                ]]></setter>
            </property>

            <property name="value"
                onget="this.getValue();"
                onset="this.setValue(val);">
            </property>
            
            <method name="checkValue">
                <parameter name="value" />
                <body><![CDATA[
                    return value;
                ]]></body>
            </method>
            
            <method name="setValue">
                <parameter name="value" />
                <body><![CDATA[
                    try{
                        var value = this.checkValue(value);
                        this.doc.setValue(this.attrid, value, this.index);
                        this.reloadValue();
                        return true;
                    } catch(e){
                        Components.utils.import("resource://modules/logger.jsm");
                        logError(e);
                    }
                    return false;
                ]]></body>
            </method>
            
            <method name="reloadValue">
                <body><![CDATA[
                    var valueNode = this.getChild('displayValue');
                    if(valueNode){
                        valueNode.value = this.getValue();
                    } else {
                        Components.utils.import("resource://modules/exceptions.jsm");
                        throw BindException("no displayValue child for attr ["+ this.attrid + "] in doc ["+this.doc.initid + "]");
                    }
                ]]></body>
            </method>
            
            <method name="setCustomValidity">
                <parameter name="message"/>
                <body><![CDATA[
                    this.inputField.setCustomValidity(message);
                    if(message){
                        alert ("(FIXME) " + message);
                        this.inputField.focus();
                        //XXX: selectAll could be better
                    }
                ]]></body>
            </method>
            
            <constructor><![CDATA[
                 var visibility = this.getAttribute('visibility');
                 if (visibility == 'S') {
                    this.setAttribute('disabled', true);
                 } else if( visibility == 'W' || visibility == 'O' ){
                    this.removeAttribute('disabled', false);
                 } else {
                    this.setAttribute('collapsed', true);
                 }
                 
                this.reloadValue();
            ]]></constructor>
            
        </implementation>
        
        <handlers>
            <handler event="change"><![CDATA[
                if(event.originalTarget == this.inputField){
                    this.setValue(this.inputField.value);
                }
            ]]></handler>
        </handlers>
    </binding>
    
    <!-- Text attributes -->
    
    <binding id="text-attr-edit" extends="&systemBindingsDirPath;/leaf-attributes-edit.xml#leaf-attr-edit">
        <content>
            <xul:hbox xbl:inherits="attrid,collapsed" flex="1" class="dcpAttribute text">
                <dcpAttributeLabel anonid="attrLabel" xbl:inherits="value=label" />
                <xul:textbox anonid="displayValue" class="dcpValue" multiline="false" xbl:inherits="disabled"/>
            </xul:hbox>
        </content>
    </binding>
    
    <binding id="longtext-attr-edit" extends="&systemBindingsDirPath;/leaf-attributes-edit.xml#leaf-attr-edit">
        <content>
            <xul:hbox xbl:inherits="attrid,collapsed" flex="1" class="dcpAttribute longtext">
                <dcpAttributeLabel anonid="attrLabel" xbl:inherits="value=label" />
                <xul:textbox anonid="displayValue" class="dcpValue" multiline="true" xbl:inherits="disabled"/>
            </xul:hbox>
        </content>
    </binding>
    
    <binding id="htmltext-attr-edit" extends="&systemBindingsDirPath;/leaf-attributes-edit.xml#leaf-attr-edit">
        <content>
            <xul:vbox xbl:inherits="attrid" flex="1" class="dcpAttribute longtext">
                <dcpAttributeLabel anonid="attrLabel" xbl:inherits="value=label" />
                <xul:iframe anonid="displayValue" src="chrome://ckeditor/content/bindings/ckeditor/ckeditor.html" class="dcpValue" flex="1"/>
            </xul:vbox>
        </content>
        <implementation>
            <method name="reloadValue">
                <body><![CDATA[
                    var contentWindow = this.getChild('displayValue').contentWindow;
                    
                    var contentDocument = this.getChild('displayValue').contentDocument;
                    
                    var value = this.getValue();
                    
                    var that = this;
                    
                    //XXX: this is suboptimal (should use DOMFrameContentLoaded)
                    var initEditor = function(){                        
                        if(contentWindow.getEditorWrapper){
                            var editorWrapper = contentWindow.getEditorWrapper();
                            editorWrapper.innerHTML = value;
                            var editor = contentWindow.initEditor();
                            editor.on('blur', function(){this.setValue(editor.getData())}, that);
                        } else {
                            setTimeout(initEditor,50);
                        }
                    };

                    setTimeout(initEditor,50);
                ]]></body>
            </method>
        </implementation>
    </binding>
    
    <!-- Numeric attributes -->
    
    <binding id="int-attr-edit" extends="&systemBindingsDirPath;/leaf-attributes-edit.xml#leaf-attr-edit">
        <content>
            <xul:hbox xbl:inherits="attrid,collapsed" flex="1" class="dcpAttribute numeric int">
                <dcpAttributeLabel anonid="attrLabel" xbl:inherits="value=label" />
                <xul:textbox anonid="displayValue" class="dcpValue" xbl:inherits="disabled"/>
            </xul:hbox>
        </content>
        
        <implementation>
            <method name="checkValue">
                <parameter name="value"/>
                <body><![CDATA[
                    if( isNaN(value) ){
                        Components.utils.import("resource://modules/events.jsm");
                        this.setCustomValidity("'" + value +"' is not a number");
                        throw new attrCheckException("'" + value +"' is not a number");
                    } else {
                        this.setCustomValidity("");
                    }
                    
                    return value;
                ]]></body>
            </method>
        </implementation>
    </binding>
    
    <binding id="double-attr-edit" extends="&systemBindingsDirPath;/leaf-attributes-edit.xml#leaf-attr-edit">
        <content>
            <xul:hbox xbl:inherits="attrid" flex="1" class="dcpAttribute numeric double">
                <dcpAttributeLabel anonid="attrLabel" xbl:inherits="value=label" />
                <xul:textbox anonid="displayValue" class="dcpValue" xbl:inherits="disabled"/>
            </xul:hbox>
        </content>
        
        <implementation>
            <method name="checkValue">
                <parameter name="value"/>
                <body><![CDATA[
                    //XXX: do a better sanitization (spaces, english format, etc...)
                    var parse_double = /^[0-9]+([.,][0-9]+)?$/
                    if( value.match(parse_double) ){
                        Components.utils.import("resource://modules/events.jsm");
                        this.setCustomValidity("'" + value +"' is not a number");
                        throw new attrCheckException("'" + value +"' is not a number");
                    }
                    return value.replace(',','.');
                ]]></body>
            </method>
        </implementation>
    </binding>
    
    <binding id="money-attr-edit" extends="&systemBindingsDirPath;/leaf-attributes-edit.xml#double-attr-edit">
        <!-- For now, money attributes are the same as double -->
    </binding>
    
    <!-- Date attributes -->
    
    <binding id="date-attr-edit" extends="&systemBindingsDirPath;/leaf-attributes-edit.xml#leaf-attr-edit">
        <content>
            <xul:hbox xbl:inherits="attrid" flex="1" class="dcpAttribute date">
                <dcpAttributeLabel anonid="attrLabel" xbl:inherits="value=label" />
                <xul:datepicker anonid="displayValue" class="dcpValue" value=""/>
            </xul:hbox>
        </content>
    </binding>
    
    <!-- File attributes -->
    
    <binding id="file-attr-edit" extends="&systemBindingsDirPath;/leaf-attributes-edit.xml#leaf-attr-edit">
        <content>
            <xul:hbox xbl:inherits="attrid" flex="1" class="dcpAttribute file">
                <dcpAttributeLabel anonid="attrLabel" xbl:inherits="value=label" />
                <xul:label anonid="displayValue" class="dcpValue text-link"/>
                <xul:box anonid="buttons">
                    <xul:button anonid="modifyButton" label="&attribute.file.button.modify;" crop="center"/>
                    <xul:button anonid="deleteButton" class="delete" tooltiptext="&attribute.file.button.delete;"/>
                </xul:box>
            </xul:hbox>
        </content>
        
        <implementation>
            
            <field name="inputField"><![CDATA[
                this.getChild('displayValue');
            ]]></field>
            
            <field name="modifyButton"><![CDATA[
                this.getChild('modifyButton');
            ]]></field>
            
            <field name="deleteButton"><![CDATA[
                this.getChild('deleteButton');
            ]]></field>

            <field name="filters">
                var nsIFilePicker = Components.interfaces.nsIFilePicker;
                nsIFilePicker.filterAll | nsIFilePicker.filterApps;
            </field>

            <method name="setValue">
                <!-- value is a path -->
                <parameter name="value" />
                <body><![CDATA[
                    try{
                        Components.utils.import("resource://modules/fileManager.jsm");

                        var value = this.checkValue(value);

                        //copy file and store it
                        var aFile = Components.classes["@mozilla.org/file/local;1"].createInstance(Components.interfaces.nsILocalFile);
                        aFile.initWithPath(value);
                        fileManager.saveFile({
                            initid: this.doc.getInitid(),
                            attrid: this.attrid,
                            writable: true,
                            basename: aFile.leafName,
                            aFile: aFile,
                            forceCopy: true,
                            index: this.index
                        });

                        this.reloadValue();
                        return true;
                    } catch(e){
                        Components.utils.import("resource://modules/logger.jsm");
                        logError(e);
                    }
                    return false;
                ]]></body>
            </method>

            <method name="checkValue">
                <parameter name="value" />
                <body><![CDATA[
                    var aFile = Components.classes["@mozilla.org/file/local;1"].createInstance(Components.interfaces.nsILocalFile);
                    aFile.initWithPath(value);
                    if(aFile.exists()){
                        return value;
                    } else {
                        throw new attrCheckException("the file '" + value +"' does not exists");
                    }
                ]]></body>
            </method>

            <method name="reloadValue">
                <body><![CDATA[
                    Components.utils.import("resource://modules/fileManager.jsm");
                    var aFile = fileManager.getFile({
                        initid:this.doc.getInitid(),
                        attrid:this.attrid,
                        index:this.index
                    });
                    if(aFile){
                        this.inputField.value = aFile.leafName;
                    } else {
                        this.inputField.value = "";
                    }
                ]]></body>
            </method>
            
            <method name="chooseFile">
                <body><![CDATA[
                    Components.utils.import("resource://modules/fileManager.jsm");
                    
                    const nsIFilePicker = Components.interfaces.nsIFilePicker;

                    var fp = Components.classes["@mozilla.org/filepicker;1"].createInstance(nsIFilePicker);
                    fp.init(window, "Choose a file", nsIFilePicker.modeOpen); // TODO: dialog title
                    fp.appendFilters(this.filters);
                    
                    var rv = fp.show();
                    if (rv == nsIFilePicker.returnOK) {
                        try{
                            this.setValue(fp.file.path);
                        } catch(e){
                            alert(e);
                        }
                    }
                ]]></body>
            </method>
            
            <method name="openFile">
                <body><![CDATA[
                    Components.utils.import("resource://modules/fileManager.jsm");
                    fileManager.openFile({
                        initid: this.doc.getInitid(),
                        attrid: this.attrid
                    });
                ]]></body>
            </method>
            
        </implementation>
        
        <handlers>
            <handler event="click" button="0"><![CDATA[
                if(event.originalTarget == this.modifyButton){
                    this.chooseFile();
                } else 
                if(event.originalTarget == this.inputField){
                    this.openFile();
                }
            ]]></handler>
        </handlers>
    </binding>
    
    <binding id="image-attr-edit" extends="&systemBindingsDirPath;/leaf-attributes-edit.xml#file-attr-edit">
        <content>
            <xul:hbox xbl:inherits="attrid" flex="1" class="dcpAttribute image">
                <dcpAttributeLabel anonid="attrLabel" xbl:inherits="value=label" />
                <html:div class="dcpValue">
                    <html:img class="dcpImage" anonid="imageField" />
                </html:div>
                <xul:box anonid="buttons">
                    <xul:button anonid="modifyButton" label="&attribute.image.button.modify;" crop="center"/>
                    <xul:button anonid="deleteButton" class="delete" tooltiptext="&attribute.image.button.delete;"/>
                </xul:box>
            </xul:hbox>
        </content>
        
        <implementation>
            
            <field name="inputField"><![CDATA[
                this.getChild('imageField');
            ]]></field>

            <field name="filters">
                var nsIFilePicker = Components.interfaces.nsIFilePicker;
                nsIFilePicker.filterAll | nsIFilePicker.filterImages;
            </field>
            
            <method name="reloadValue">
                <body><![CDATA[
                    Components.utils.import("resource://modules/fileManager.jsm");
                    var aFile = fileManager.getFile({
                        initid:this.doc.getInitid(),
                        attrid:this.attrid,
                        index:this.index
                    });
                    if(aFile){
                        Components.utils.import("resource://modules/formater.jsm");
                        var aFileURI = formater.getURI({file: aFile});
                        this.inputField.src = aFileURI.spec;
                        this.inputField.tooltipText = aFile.leafName;
                    } else {
                        this.inputField.src = "";
                        this.inputField.tooltipText = "";
                    }
                ]]></body>
            </method>
            
        </implementation>
    </binding>
    
    <!-- enum attributes -->
    
    <binding id="enum-attr-edit" extends="&systemBindingsDirPath;/leaf-attributes-edit.xml#leaf-attr-edit">
        <content>
            <xul:hbox xbl:inherits="attrid" flex="1" class="dcpAttribute file">
                <dcpAttributeLabel anonid="attrLabel" xbl:inherits="value=label" />
                <xul:menulist anonid="displayValue" class="dcpValue">
                    <xul:menupopup datasources="profile:storage.sqlite" ref="*" querytype="storage">
                        <xul:template>
                            <xul:query><![CDATA[
                                SELECT key, label 
                                FROM enums
                                WHERE famid = :famid AND attrid = :attrid 
                            ]]>
                                <xul:param anonid="attrid" name="attrid"/>
                                <xul:param anonid="famid" name="famid" type="integer"/>
                            </xul:query>
                            <xul:action>
                                <xul:menuitem uri="?" value="?key" label="?label"/>
                            </xul:action>
                        </xul:template>
                    </xul:menupopup>
                </xul:menulist>
            </xul:hbox>
        </content>
        
        <implementation>
            
            <method name="reloadValue">
                <body><![CDATA[
                    if(this.constructed){
                        var value = this.getValue();
                        var menuList = this.getChild('displayValue');
                        var nbItems = menuList.itemCount;
                        if(value){
                            for(var i = 0; i < nbItems; i++) {
                                var item = menuList.getItemAtIndex(i);
                                if( (item.localName == 'menuitem') && (item.value == value) ){
                                    menuList.selectedIndex = i;
                                    return;
                                }
                            }
                        }
                    }
                ]]></body>
            </method>
            
            <constructor><![CDATA[
                this.getChild('attrid').textContent = this.attrid;
                this.getChild('famid').textContent = this.doc.getProperty('fromid');
                this.getChild('displayValue').menupopup.builder.rebuild();
                this.constructed = true;
                this.reloadValue();
            ]]></constructor>
            
        </implementation>

        <handlers>
            <handler event="command"><![CDATA[
                this.setValue(this.getChild('displayValue').value);
            ]]></handler>
        </handlers>
    </binding>

    
    
</bindings>