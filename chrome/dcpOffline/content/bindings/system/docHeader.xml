<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE bindings [
      <!ENTITY % header-bindingDTD SYSTEM "chrome://dcpoffline/locale/bindings/header-binding.dtd" >
      <!ENTITY systemBindingsDirPath "chrome://dcpoffline/content/bindings/system" >
      %header-bindingDTD;
]>

<bindings
    id="docHeaderBindings"
    xmlns="http://www.mozilla.org/xbl"
    xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
    xmlns:xbl="http://www.mozilla.org/xbl">

    <binding
        id="doc-header"
        extends="&systemBindingsDirPath;/doc-item.xml#doc-item">

        <content>
            <xul:hbox
                class="document-header"
                flex="1">
                <xul:hbox flex="1">
                    <xul:image anonid="document-icon" />
                    <xul:hbox class="header-text">
                        <xul:label
                            anonid="document-title"
                            class="document-title" />
                        <xul:label
                            anonid="document-state"
                            class="document-state" />
                    </xul:hbox>
                </xul:hbox>
                <children />
            </xul:hbox>
        </content>

        <implementation>

            <field
                name="icon"
                readonly="true">
                this.getChild("document-icon");
            </field>

            <field
                name="title"
                readonly="true">
                this.getChild("document-title");
            </field>

            <field
                name="state"
                readonly="true">
                this.getChild("document-state");
            </field>

            <constructor><![CDATA[
                var icon = this.doc.getIcon();
                
                if( icon ){
                    icon = "file://" + icon;
                }
                
                this.icon.src = icon;
                logConsole('id is'+this.doc.id + this.doc.inMemory, this.doc);
                if (! this.doc.inMemoryDoc) {
                   this.title.value = this.doc.getTitle();
                   this.title.tooltipText = this.doc.getTitle();
                } else {

                   Components.utils.import("resource://modules/getText.jsm");
                   this.title.value = getText('document.create')+' '+this.doc.getFamilyTitle();
                }
                var state = this.doc.getProperty('labelstate');
                if(state){
                    var activity = this.doc.getProperty('activitystate');
                    if(activity){
                        state += ' ( '+activity+' )';
                    }
                    this.state.value = state;
                }
                
            ]]></constructor>
        </implementation>

        <!--<handlers/> -->
    </binding>

</bindings>